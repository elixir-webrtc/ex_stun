defmodule ExSTUN.RFC5769Test do
  use ExUnit.Case

  alias ExSTUN.Message
  alias ExSTUN.Message.Type
  alias ExSTUN.Message.Attribute.{Software, Username, XORMappedAddress}

  test "decoding sample request" do
    req =
      <<0x00, 0x01, 0x00, 0x58, 0x21, 0x12, 0xA4, 0x42, 0xB7, 0xE7, 0xA7, 0x01, 0xBC, 0x34, 0xD6,
        0x86, 0xFA, 0x87, 0xDF, 0xAE, 0x80, 0x22, 0x00, 0x10, 0x53, 0x54, 0x55, 0x4E, 0x20, 0x74,
        0x65, 0x73, 0x74, 0x20, 0x63, 0x6C, 0x69, 0x65, 0x6E, 0x74, 0x00, 0x24, 0x00, 0x04, 0x6E,
        0x00, 0x01, 0xFF, 0x80, 0x29, 0x00, 0x08, 0x93, 0x2F, 0xF9, 0xB1, 0x51, 0x26, 0x3B, 0x36,
        0x00, 0x06, 0x00, 0x09, 0x65, 0x76, 0x74, 0x6A, 0x3A, 0x68, 0x36, 0x76, 0x59, 0x20, 0x20,
        0x20, 0x00, 0x08, 0x00, 0x14, 0x9A, 0xEA, 0xA7, 0x0C, 0xBF, 0xD8, 0xCB, 0x56, 0x78, 0x1E,
        0xF2, 0xB5, 0xB2, 0xD3, 0xF2, 0x49, 0xC1, 0xB5, 0x71, 0xA2, 0x80, 0x28, 0x00, 0x04, 0xE5,
        0x7A, 0x3B, 0xCF>>

    assert {:ok, message} = Message.decode(req)
    assert message.type == %Type{class: :request, method: :binding}
    assert message.transaction_id == 56_915_807_328_848_210_473_588_875_182

    assert {:ok, %Software{value: "STUN test client"}} = Message.get_attribute(message, Software)
    assert {:ok, %Username{value: "evtj:h6vY"}} = Message.get_attribute(message, Username)

    password = "VOkJxbRl1RmTxUk/WvJxBt"
    assert {:ok, ^password} = Message.authenticate_st(message, password)
    assert Message.check_fingerprint(message)
  end

  test "decoding sample IPv4 response" do
    req =
      <<0x01, 0x01, 0x00, 0x3C, 0x21, 0x12, 0xA4, 0x42, 0xB7, 0xE7, 0xA7, 0x01, 0xBC, 0x34, 0xD6,
        0x86, 0xFA, 0x87, 0xDF, 0xAE, 0x80, 0x22, 0x00, 0x0B, 0x74, 0x65, 0x73, 0x74, 0x20, 0x76,
        0x65, 0x63, 0x74, 0x6F, 0x72, 0x20, 0x00, 0x20, 0x00, 0x08, 0x00, 0x01, 0xA1, 0x47, 0xE1,
        0x12, 0xA6, 0x43, 0x00, 0x08, 0x00, 0x14, 0x2B, 0x91, 0xF5, 0x99, 0xFD, 0x9E, 0x90, 0xC3,
        0x8C, 0x74, 0x89, 0xF9, 0x2A, 0xF9, 0xBA, 0x53, 0xF0, 0x6B, 0xE7, 0xD7, 0x80, 0x28, 0x00,
        0x04, 0xC0, 0x7D, 0x4C, 0x96>>

    assert {:ok, message} = Message.decode(req)
    assert message.type == %Type{class: :success_response, method: :binding}
    assert message.transaction_id == 56_915_807_328_848_210_473_588_875_182

    assert {:ok, %Software{value: "test vector"}} == Message.get_attribute(message, Software)

    assert {:ok, %XORMappedAddress{address: {192, 0, 2, 1}, port: 32_853}} ==
             Message.get_attribute(message, XORMappedAddress)

    password = "VOkJxbRl1RmTxUk/WvJxBt"
    assert {:ok, ^password} = Message.authenticate_st(message, password)
    assert Message.check_fingerprint(message)
  end

  test "decoding sample IPv6 response" do
    req =
      <<0x01, 0x01, 0x00, 0x48, 0x21, 0x12, 0xA4, 0x42, 0xB7, 0xE7, 0xA7, 0x01, 0xBC, 0x34, 0xD6,
        0x86, 0xFA, 0x87, 0xDF, 0xAE, 0x80, 0x22, 0x00, 0x0B, 0x74, 0x65, 0x73, 0x74, 0x20, 0x76,
        0x65, 0x63, 0x74, 0x6F, 0x72, 0x20, 0x00, 0x20, 0x00, 0x14, 0x00, 0x02, 0xA1, 0x47, 0x01,
        0x13, 0xA9, 0xFA, 0xA5, 0xD3, 0xF1, 0x79, 0xBC, 0x25, 0xF4, 0xB5, 0xBE, 0xD2, 0xB9, 0xD9,
        0x00, 0x08, 0x00, 0x14, 0xA3, 0x82, 0x95, 0x4E, 0x4B, 0xE6, 0x7B, 0xF1, 0x17, 0x84, 0xC9,
        0x7C, 0x82, 0x92, 0xC2, 0x75, 0xBF, 0xE3, 0xED, 0x41, 0x80, 0x28, 0x00, 0x04, 0xC8, 0xFB,
        0x0B, 0x4C>>

    assert {:ok, message} = Message.decode(req)
    assert message.type == %Type{class: :success_response, method: :binding}
    assert message.transaction_id == 56_915_807_328_848_210_473_588_875_182

    assert {:ok, %Software{value: "test vector"}} = Message.get_attribute(message, Software)
    # TODO: fix this
    assert {:ok,
            %XORMappedAddress{
              address: {0x2001, 0xDB8, 0x1234, 0x5678, 0x11, 0x2233, 0x4455, 0x6677},
              port: 32_853
            }} = Message.get_attribute(message, XORMappedAddress)

    password = "VOkJxbRl1RmTxUk/WvJxBt"
    assert {:ok, ^password} = Message.authenticate_st(message, password)
    assert Message.check_fingerprint(message)
  end

  test "decoding sample request with lont-term authentication" do
  end
end
